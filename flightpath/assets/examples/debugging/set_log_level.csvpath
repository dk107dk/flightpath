~
 This csvpath shows how to set the debugging level on the fly. You can use this
 as you develop csvpaths to elevate your log output for just certain problem 
 lines. 

 The log levels are "error", "warn", "info", and "debug".  

 Run this csvpath by clicking putting your cursor in the csvpath and hitting
 control-r (or command-r on a Mac) or right-click and pick Run.

 id: setting the log level on-the-fly
 test-data: examples/debugging/World_Port_Index_sample.csv
~

$[*][ 
         ~ this prints the line number so you can see the run working ~
	print("$.csvpath.line_number")

         ~ here we set the logging level. try setting it to "debug" ~
	line_number() == 0 -> debug("error")
	
	~ we'll stop on line 10 because that's enough for this example ~
	line_number() == 10 -> stop()
]

---- CSVPATH ----

~
   For most people most of the time you won't need to see a stack trace. 
   When automating/integrating CsvPath Framework or communicating with the maintainers 
   there may be times when adding the stack to the log could help. If needed, this 
   is the way to do it. Logging must be set to debug. If you don't want the full 
   debug-level logs you can just print to the default printstream.
   
   id: dumping stack
   test-data: examples/debugging/World_Port_Index_sample.csv
~
$[*][ 
	print("$.csvpath.line_number")

	line_number() == 3 -> brief_stack_trace()

	line_number() == 10 -> stop()
]
